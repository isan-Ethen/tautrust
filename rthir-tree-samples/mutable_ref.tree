DefId(0:3 ~ mutable_ref[ada1]::mutable_ref), params: [
  Param {
    param: Some(
      Expr {
        span: rthir-tree-samples/mutable_ref.rs:1:16: 1:17 (#0)
        kind:
          Pat {
            PatKind {
              Binding {
                name: "a"
                mode: BindingMode(No, Not)
                var: LocalVarId(HirId(DefId(0:3 ~ mutable_ref[ada1]::mutable_ref).2))
                ty: &'{erased} mut usize
                is_primary: true
                subpattern: None
              }
            }
          }
      }
    )
  }
]
body:
  Expr {
    span: rthir-tree-samples/mutable_ref.rs:1:31: 1:43 (#0)
    kind:
      Block {
        stmts: [
          Expr {
            span: rthir-tree-samples/mutable_ref.rs:1:33: 1:40 (#0)
            kind:
              AssignOp {
                op: Add
                lhs:
                  Expr {
                    span: rthir-tree-samples/mutable_ref.rs:1:33: 1:35 (#0)
                    kind:
                      Deref {
                        Expr {
                          span: rthir-tree-samples/mutable_ref.rs:1:34: 1:35 (#0)
                          kind:
                            VarRef {
                              id: LocalVarId(HirId(DefId(0:3 ~ mutable_ref[ada1]::mutable_ref).2))
                            }
                        }
                      }
                  }
                rhs:
                  Expr {
                    span: rthir-tree-samples/mutable_ref.rs:1:39: 1:40 (#0)
                    kind:
                      Literal( lit: Spanned { node: Int(Pu128(1), Unsuffixed), span: rthir-tree-samples/mutable_ref.rs:1:39: 1:40 (#0) }, neg: false)

                  }
              }
          }
        ]
        expr: []
      }
  }

DefId(0:4 ~ mutable_ref[ada1]::main), params: [
]
body:
  Expr {
    span: rthir-tree-samples/mutable_ref.rs:3:11: 7:2 (#0)
    kind:
      Block {
        stmts: [
          Expr {
            span: rthir-tree-samples/mutable_ref.rs:4:5: 4:18 (#0)
            kind:
                LetStmt {
                  pattern:
                    Expr {
                      span: rthir-tree-samples/mutable_ref.rs:4:9: 4:14 (#0)
                      kind:
                        Pat {
                          PatKind {
                            Binding {
                              name: "a"
                              mode: BindingMode(No, Mut)
                              var: LocalVarId(HirId(DefId(0:4 ~ mutable_ref[ada1]::main).4))
                              ty: usize
                              is_primary: true
                              subpattern: None
                            }
                          }
                        }
                    }
                  ,
                  initializer: Some(
                    Expr {
                      span: rthir-tree-samples/mutable_ref.rs:4:17: 4:18 (#0)
                      kind:
                        Literal( lit: Spanned { node: Int(Pu128(0), Unsuffixed), span: rthir-tree-samples/mutable_ref.rs:4:17: 4:18 (#0) }, neg: false)

                    }
                  )
                  else_block: None
                }
          }
          Expr {
            span: rthir-tree-samples/mutable_ref.rs:6:5: 6:24 (#0)
            kind:
              Call {
                ty: FnDef(DefId(0:3 ~ mutable_ref[ada1]::mutable_ref), [])
                from_hir_call: true
                fn_span: rthir-tree-samples/mutable_ref.rs:6:5: 6:24 (#0)
                fun:
                  Expr {
                    span: rthir-tree-samples/mutable_ref.rs:6:5: 6:16 (#0)
                    kind:
                      ZstLiteral(user_ty: None)
                  }
                args: [
                  Expr {
                    span: rthir-tree-samples/mutable_ref.rs:6:17: 6:23 (#0)
                    kind:
                      Borrow (
                        borrow_kind: Mut { kind: TwoPhaseBorrow }
                        arg:
                          Expr {
                            span: rthir-tree-samples/mutable_ref.rs:6:17: 6:23 (#0)
                            kind:
                              Deref {
                                Expr {
                                  span: rthir-tree-samples/mutable_ref.rs:6:17: 6:23 (#0)
                                  kind:
                                    Borrow (
                                      borrow_kind: Mut { kind: Default }
                                      arg:
                                        Expr {
                                          span: rthir-tree-samples/mutable_ref.rs:6:22: 6:23 (#0)
                                          kind:
                                            VarRef {
                                              id: LocalVarId(HirId(DefId(0:4 ~ mutable_ref[ada1]::main).4))
                                            }
                                        }
                                    )
                                }
                              }
                          }
                      )
                  }
                ]
              }
          }
        ]
        expr: []
      }
  }
